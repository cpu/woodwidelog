<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Articles on Wood Wide Log</title><link>https://log.woodweb.ca/articles/</link><description>Recent content in Articles on Wood Wide Log</description><language>en-us</language><copyright>Daniel McCarney</copyright><lastBuildDate>Sun, 26 Nov 2023 08:00:00 -0400</lastBuildDate><atom:link href="https://log.woodweb.ca/articles/index.xml" rel="self" type="application/rss+xml"/><item><title>A Beyond-the-basics Rust Flake</title><link>https://log.woodweb.ca/articles/rust-flake/</link><pubDate>Sun, 26 Nov 2023 08:00:00 -0400</pubDate><guid>https://log.woodweb.ca/articles/rust-flake/</guid><description>&lt;h1 id="about">About&lt;/h1>
&lt;p>There are many resources for writing &lt;a href="https://zero-to-nix.com/concepts/flakes">Nix flakes&lt;/a> for Rust projects but they can
often be too simple. They may focus on projects without complex native
code dependencies, or only offer a single development environment with a fixed
Rust toolchain version.&lt;/p>
&lt;p>While working on Flakes for my own Rust projects I&amp;rsquo;ve found moving beyond the
basics took experimentation and combining parts from many different resources.
This article is my attempt to document a complete example that&amp;rsquo;s worked for
me. It offers:&lt;/p>
&lt;ul>
&lt;li>Support for native code dependencies.
&lt;ul>
&lt;li>In particular, &amp;ldquo;-sys&amp;rdquo; crate dependencies that use &lt;a href="https://github.com/mozilla/cbindgen">cbindgen&lt;/a> for
generating &lt;a href="https://doc.rust-lang.org/nomicon/ffi.html">FFI&lt;/a> bindings.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A development environment for three Rust versions:
&lt;ul>
&lt;li>A Minimum Supported Rust Version (MSRV).&lt;/li>
&lt;li>Latest Stable.&lt;/li>
&lt;li>A selected Nightly.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Multiple output packages, with different Cargo features selected.&lt;/li>
&lt;/ul>
&lt;h1 id="the-flake">The Flake&lt;/h1>
&lt;p>Without further ado, here&amp;rsquo;s the final Flake. It packages a simple Rust binary
project from a Cargo project located in the same directory. The Cargo project
produces a single command-line binary, &lt;code>example&lt;/code>, that demonstrates
text-to-speech on Linux. It has an optional &lt;code>foobar&lt;/code> feature that when enabled
will change the spoken message. You can find the complete example in
&lt;a href="https://github.com/cpu/rust-flake">cpu/rust-flake&lt;/a>.&lt;/p>
&lt;p>The Rust code depends on the &lt;a href="https://crates.io/crates/tts">tts-rs&lt;/a> crate for its text-to-speech magic, which
in turn uses the &lt;a href="https://crates.io/crates/speech-dispatcher">speech-dispatcher&lt;/a> and &lt;a href="https://crates.io/crates/speech-dispatcher-sys">speech-dispatcher-sys&lt;/a> crates. On
Linux, the &lt;code>-sys&lt;/code> crate uses &lt;a href="https://www.freedesktop.org/wiki/Software/pkg-config/">pkg-config&lt;/a> and &lt;a href="https://github.com/mozilla/cbindgen">cbindgen&lt;/a> to generate FFI headers
for the native &lt;a href="https://wiki.archlinux.org/title/Speech_dispatcher">speechd&lt;/a> dependency. Getting this working reliable without Nix
would require manually installing extra system packages (using &lt;code>apt-get&lt;/code>, &lt;code>yum&lt;/code>,
&lt;code>brew&lt;/code>, etc) and be difficult to reproduce consistently across systems.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-nix" data-lang="nix">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputs &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nixpkgs&lt;span style="color:#f92672">.&lt;/span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github:nixos/nixpkgs/nixos-unstable&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flake-parts&lt;span style="color:#f92672">.&lt;/span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github:hercules-ci/flake-parts&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rust-overlay&lt;span style="color:#f92672">.&lt;/span>url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github:oxalica/rust-overlay&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outputs &lt;span style="color:#f92672">=&lt;/span> inputs:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inputs&lt;span style="color:#f92672">.&lt;/span>flake-parts&lt;span style="color:#f92672">.&lt;/span>lib&lt;span style="color:#f92672">.&lt;/span>mkFlake { &lt;span style="color:#66d9ef">inherit&lt;/span> inputs; } {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> systems &lt;span style="color:#f92672">=&lt;/span> [ &lt;span style="color:#e6db74">&amp;#34;x86_64-linux&amp;#34;&lt;/span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> perSystem &lt;span style="color:#f92672">=&lt;/span> { config&lt;span style="color:#f92672">,&lt;/span> self&amp;#39;&lt;span style="color:#f92672">,&lt;/span> pkgs&lt;span style="color:#f92672">,&lt;/span> lib&lt;span style="color:#f92672">,&lt;/span> system&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">...&lt;/span> }:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> runtimeDeps &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> pkgs; [ alsa-lib speechd ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buildDeps &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> pkgs; [ pkg-config rustPlatform&lt;span style="color:#f92672">.&lt;/span>bindgenHook ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> devDeps &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> pkgs; [ gdb ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cargoToml &lt;span style="color:#f92672">=&lt;/span> builtins&lt;span style="color:#f92672">.&lt;/span>fromTOML (builtins&lt;span style="color:#f92672">.&lt;/span>readFile &lt;span style="color:#e6db74">./Cargo.toml&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msrv &lt;span style="color:#f92672">=&lt;/span> cargoToml&lt;span style="color:#f92672">.&lt;/span>package&lt;span style="color:#f92672">.&lt;/span>rust-version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rustPackage &lt;span style="color:#f92672">=&lt;/span> features:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (pkgs&lt;span style="color:#f92672">.&lt;/span>makeRustPlatform {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cargo &lt;span style="color:#f92672">=&lt;/span> pkgs&lt;span style="color:#f92672">.&lt;/span>rust-bin&lt;span style="color:#f92672">.&lt;/span>stable&lt;span style="color:#f92672">.&lt;/span>latest&lt;span style="color:#f92672">.&lt;/span>minimal;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rustc &lt;span style="color:#f92672">=&lt;/span> pkgs&lt;span style="color:#f92672">.&lt;/span>rust-bin&lt;span style="color:#f92672">.&lt;/span>stable&lt;span style="color:#f92672">.&lt;/span>latest&lt;span style="color:#f92672">.&lt;/span>minimal;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })&lt;span style="color:#f92672">.&lt;/span>buildRustPackage {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inherit&lt;/span> (cargoToml&lt;span style="color:#f92672">.&lt;/span>package) name version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">./.&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cargoLock&lt;span style="color:#f92672">.&lt;/span>lockFile &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">./Cargo.lock&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buildFeatures &lt;span style="color:#f92672">=&lt;/span> features;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buildInputs &lt;span style="color:#f92672">=&lt;/span> runtimeDeps;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nativeBuildInputs &lt;span style="color:#f92672">=&lt;/span> buildDeps;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Uncomment if your cargo tests require networking or otherwise&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># don&amp;#39;t play nicely with the Nix build sandbox:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># doCheck = false;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mkDevShell &lt;span style="color:#f92672">=&lt;/span> rustc:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pkgs&lt;span style="color:#f92672">.&lt;/span>mkShell {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shellHook &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> export RUST_SRC_PATH=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>pkgs&lt;span style="color:#f92672">.&lt;/span>rustPlatform&lt;span style="color:#f92672">.&lt;/span>rustLibSrc&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#39;&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buildInputs &lt;span style="color:#f92672">=&lt;/span> runtimeDeps;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nativeBuildInputs &lt;span style="color:#f92672">=&lt;/span> buildDeps &lt;span style="color:#f92672">++&lt;/span> devDeps &lt;span style="color:#f92672">++&lt;/span> [ rustc ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">in&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _module&lt;span style="color:#f92672">.&lt;/span>args&lt;span style="color:#f92672">.&lt;/span>pkgs &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">import&lt;/span> inputs&lt;span style="color:#f92672">.&lt;/span>nixpkgs {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inherit&lt;/span> system;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> overlays &lt;span style="color:#f92672">=&lt;/span> [ (&lt;span style="color:#f92672">import&lt;/span> inputs&lt;span style="color:#f92672">.&lt;/span>rust-overlay) ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> packages&lt;span style="color:#f92672">.&lt;/span>default &lt;span style="color:#f92672">=&lt;/span> self&amp;#39;&lt;span style="color:#f92672">.&lt;/span>packages&lt;span style="color:#f92672">.&lt;/span>example;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> devShells&lt;span style="color:#f92672">.&lt;/span>default &lt;span style="color:#f92672">=&lt;/span> self&amp;#39;&lt;span style="color:#f92672">.&lt;/span>devShells&lt;span style="color:#f92672">.&lt;/span>nightly;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> packages&lt;span style="color:#f92672">.&lt;/span>example &lt;span style="color:#f92672">=&lt;/span> (rustPackage &lt;span style="color:#e6db74">&amp;#34;foobar&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> packages&lt;span style="color:#f92672">.&lt;/span>example-base &lt;span style="color:#f92672">=&lt;/span> (rustPackage &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> devShells&lt;span style="color:#f92672">.&lt;/span>nightly &lt;span style="color:#f92672">=&lt;/span> (mkDevShell (pkgs&lt;span style="color:#f92672">.&lt;/span>rust-bin&lt;span style="color:#f92672">.&lt;/span>selectLatestNightlyWith
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (toolchain: toolchain&lt;span style="color:#f92672">.&lt;/span>default)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> devShells&lt;span style="color:#f92672">.&lt;/span>stable &lt;span style="color:#f92672">=&lt;/span> (mkDevShell pkgs&lt;span style="color:#f92672">.&lt;/span>rust-bin&lt;span style="color:#f92672">.&lt;/span>stable&lt;span style="color:#f92672">.&lt;/span>latest&lt;span style="color:#f92672">.&lt;/span>default);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> devShells&lt;span style="color:#f92672">.&lt;/span>msrv &lt;span style="color:#f92672">=&lt;/span> (mkDevShell pkgs&lt;span style="color:#f92672">.&lt;/span>rust-bin&lt;span style="color:#f92672">.&lt;/span>stable&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>msrv&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#f92672">.&lt;/span>default);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="usage">Usage&lt;/h1>
&lt;h2 id="default-package">Default Package&lt;/h2>
&lt;p>After cloning the repo, you can run the default Flake output package directly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nix run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or, to run the output package that doesn&amp;rsquo;t enable the &amp;ldquo;foobar&amp;rdquo; feature:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nix run &lt;span style="color:#e6db74">&amp;#39;.#example-base&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="dev-environments">Dev. Environments&lt;/h2>
&lt;p>You can quickly enter a development environment for one of the three Rust
versions:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Rust nightly (default):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nix develop
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Rust stable:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nix develop &lt;span style="color:#e6db74">&amp;#39;.#stable&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># MSRV:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nix develop &lt;span style="color:#e6db74">&amp;#39;.#msrv&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cargo">Cargo&lt;/h3>
&lt;p>In each development environment you&amp;rsquo;ll have the usual &lt;code>cargo&lt;/code> tooling and any
extra &lt;code>devDeps&lt;/code> specified:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rustc --version &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> gdb --version &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> speech-dispatcher --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cargo fmt &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cargo clippy &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cargo test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cargo run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cargo run --all-features --release
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="quickly-running-a-command">Quickly running a command&lt;/h3>
&lt;p>Rather than enter a development shell you can also run a command in the
development environment directly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Nightly:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nix develop &lt;span style="color:#e6db74">&amp;#39;.#nightly&amp;#39;&lt;/span> --command cargo test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Stable:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nix develop &lt;span style="color:#e6db74">&amp;#39;.#stable&amp;#39;&lt;/span> --command cargo test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># MSRV:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nix develop &lt;span style="color:#e6db74">&amp;#39;.#msrv&amp;#39;&lt;/span> --command cargo test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="details">Details&lt;/h2>
&lt;p>Some points of interest:&lt;/p>
&lt;ol>
&lt;li>&lt;code>cargo.toml&lt;/code> - The Cargo metadata is read into a Nix binding, &lt;code>cargoToml&lt;/code>,
and used to avoid duplicating the project name, Cargo version, or MSRV in
both the &lt;code>Cargo.toml&lt;/code> and the Nix Flake.&lt;/li>
&lt;li>&lt;code>runtimeDeps&lt;/code>, &lt;code>buildDeps&lt;/code> and &lt;code>devDeps&lt;/code> - I often have to remind myself the
difference between &lt;code>buildInputs&lt;/code> and &lt;code>nativeBuildInputs&lt;/code> so I make these
helpful bindings:
&lt;ol>
&lt;li>&lt;code>runtimeDeps&lt;/code> corresponds to &lt;code>buildInputs&lt;/code> - things needed at runtime.&lt;/li>
&lt;li>&lt;code>buildDeps&lt;/code> corresponds to &lt;code>nativeBuildInputs&lt;/code> - things needed only when
building.&lt;/li>
&lt;li>&lt;code>devDeps&lt;/code> is for extra dev. packages - things needed only in &lt;code>nix develop&lt;/code>
shells.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;code>cbindgen&lt;/code> - Getting this working requires &lt;code>cbindgen&lt;/code> be able to find
&lt;code>libclang&lt;/code>, and &lt;code>libclang&lt;/code> being able to find your native dependencies.
There&amp;rsquo;s a handy &lt;code>bindgenHook&lt;/code> that we use for this purpose, letting it do all
the heavy lifting. No need to muck with &lt;code>LIBCLANG_PATH&lt;/code>.&lt;/li>
&lt;li>&lt;code>withFeatures&lt;/code> - this is a small helper function that reduces duplication
building a Nix Flake output from a Rust project. It makes it easy to define
multiple Flake package outputs that differ only in Cargo feature selections.&lt;/li>
&lt;li>&lt;code>mkDevShell&lt;/code> - this is a small helper function that reduces duplication
creating a development shell with a specific Rust version. It also sets the
&lt;code>RUST_SRC_PATH&lt;/code> that many IDEs will use to find the Rust stdlib.&lt;/li>
&lt;/ol>
&lt;h2 id="why-bother">Why bother?&lt;/h2>
&lt;p>This might seem like a lot of work. Why not just use &lt;code>rustup&lt;/code> to manage three
Rust versions and call it a day? For me there are a few primary advantages (&lt;em>and
lots of smaller ones!&lt;/em>):&lt;/p>
&lt;ul>
&lt;li>Rustup can&amp;rsquo;t manage system level dependencies. Typically you&amp;rsquo;ll have to
describe which packages a user needs to install before building, or write
adhoc scripts to install the required dependencies. Keeping the versions used
by different developers in-sync with one another across different OSes is
a nightmare. Using a Nix flake makes this trivially reproducible.&lt;/li>
&lt;li>Users of &lt;code>nix&lt;/code> or &lt;code>NixOS&lt;/code> can consume your project through the Flake,
effortlessly adding the Flake as an input to their own Nix flakes, or running
the project in an ephemeral shell:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nix run github:cpu/rust-flake
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>It works for more than just Rust. As one example, ff your project needs Python
to generate test data you can easily extend the Flake to manage Python runtime
versions and &lt;code>pip&lt;/code> dependencies.&lt;/li>
&lt;li>You can reuse the same reproducible dev. environments for your CI. This
eliminates the classic blunders that ensue when the native dependency versions
or toolchain versions installed in CI drift from what you use locally.&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>This Flake isn&amp;rsquo;t too complicated, but it can take some time to combine the
bits and pieces from different documentation sources to make a unified whole.
Hopefully this example helps demystify the complete picture.&lt;/p>
&lt;p>You can find the complete example with the accompanying Rust crate in
&lt;a href="https://github.com/cpu/rust-flake">cpu/rust-flake&lt;/a>. That repo also shows how to set up GitHub actions CI to use
the &lt;code>nix&lt;/code> environment. No more mismatched dependency and tooling versions
between dev. and CI!&lt;/p></description></item></channel></rss>